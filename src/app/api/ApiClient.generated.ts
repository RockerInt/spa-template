/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.3.0 (NJsonSchema v9.4.2.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as moment from 'moment';

export interface IClient {
    /**
     * @return Success
     */
    serverTimeGet(): Promise<ExampleDto>;
}

export class Client implements IClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";        
    }

    /**
     * @return Success
     */
    serverTimeGet(): Promise<ExampleDto> {
        let url_ = this.baseUrl + "/server-time";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processServerTimeGet(_response);
        });
    }

    protected processServerTimeGet(response: Response): Promise<ExampleDto> {
        const status = response.status;
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: ExampleDto = null;
            result200 = _responseText === "" ? null : <ExampleDto>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText);
            });
        }
        return Promise.resolve<ExampleDto>(<any>null);
    }
}

export interface ExampleDto {
    message?: string;
    currentServerTime?: moment.Moment;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): any {
    throw new SwaggerException(message, status, response, result);
}